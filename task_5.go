package main

import (
	"fmt"
	"time"
)

//Разработать программу, которая будет последовательно отправлять значения в канал,
//а с другой стороны канала — читать. По истечению N секунд программа должна завершаться.

func Task_5_solution() {
	// инициализация канала
	dataChan := make(chan int)
	// инициализация переменной, определяющей на какое время ставиться таёмер (продолжительность)
	var seconds time.Duration
	fmt.Println("Введите время таймера")
	// получение длительность таймера по вводу пользователя
	fmt.Scanf("%d", &seconds)
	// Таймер ожидает истечения времени, а после отправляет текущее время в возращаемые им же канал (имя канала timer)
	timer := time.After(time.Second * seconds)

	makeReader(dataChan)

	//метка, необходимая для остановки беконечного цикла из select
	// обычный вызов break останавливается только вложенную часть (в данном случае select)
loop:
	for i := 0; ; i++ {
		select {
		// если будут полученны данные из канала timer, сработает данные case и бесконечный цикл будет остановлен
		case <-timer:
			fmt.Println("Время вышло")
			break loop
		// если таймер ещё не сработал, то продолжиться передача данных в канал
		default:
			dataChan <- i

		}
	}
}

// Создание ридера в отдельной горутине
func makeReader(dCh chan int) {
	go func() {
		for number := range dCh {
			fmt.Printf("Получено число %d: ", number)
		}
	}()

}
